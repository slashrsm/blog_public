<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:foaf="http://xmlns.com/foaf/0.1/" xmlns:og="http://ogp.me/ns#" xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#" xmlns:schema="http://schema.org/" xmlns:sioc="http://rdfs.org/sioc/ns#" xmlns:sioct="http://rdfs.org/sioc/types#" xmlns:skos="http://www.w3.org/2004/02/skos/core#" xmlns:xsd="http://www.w3.org/2001/XMLSchema#" version="2.0" xml:base="https://janezurevc.name/">
  <channel>
    <title>Janez Urevc - Web, Software and random stuff.</title>
    <link>https://janezurevc.name/</link>
    <description/>
    <language>en</language>
    
    <item>
  <title>Real-time auto save with Phoenix LiveView</title>
  <link>https://janezurevc.name/real-time-auto-save-phoenix-liveview</link>
  <description>
&lt;span&gt;Real-time auto save with Phoenix LiveView&lt;/span&gt;

&lt;span&gt;&lt;span lang="" about="https://janezurevc.name/users/slashrsm" typeof="schema:Person" property="schema:name" datatype="" xml:lang=""&gt;slashrsm&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Mon, 16.03.2020 - 21:18&lt;/span&gt;

            &lt;div class="field field--name-body field--type-text-with-summary field--label-hidden field--item"&gt;&lt;h2&gt;Background&lt;/h2&gt;

&lt;p&gt;In the past weeks I spent quite some time working on &lt;a href="https://bitqa.app"&gt;BitQ&amp;A&lt;/a&gt;; my side project that explores possibilities that digital currencies offer. BitQ&amp;A is a Phoenix application that I initially created for the &lt;a href="https://hackathon.bitcoinassociation.net/"&gt;2nd Bitcoin SV virtual hackathon&lt;/a&gt;. It was also the first project where I had an opportunity to try &lt;a href="https://github.com/phoenixframework/phoenix_live_view"&gt;LiveView&lt;/a&gt; (brilliant tool that brings rich real-time UX to Phoenix).&lt;/p&gt;

&lt;p&gt;I already used LiveView for numerous parts of the site (such as real-time Markdown previews), when a feature request for real-time auto save came in. Knowing how complicated this would be to achieve in tools that I used in the past, I decided to bite into this one. The more I thought about the problem the more I was convinced that LiveView is the way to go due to its speed and efficiency. I was aware that I will need to make sure that the constant inflow of changes won't kill my backend or the database, but I was curious if I can make it work.&lt;/p&gt;

&lt;h2&gt;The devil is in the details....&lt;/h2&gt;

&lt;p&gt;This article will describe a simplified version of the solution. In order to keep things simple we will save changes into the original schema. This comes with some drawbacks; changes will be immediately seen to everyone and we will run into issues in case of failed validations. The real life solution would require a bit smarter solution; possibly a separate draft schema (the approach used on BitQ&amp;A), "forward" revisions or something similar. However, I do think this part is not essential to explain the approach that I took. Keep it simple, stupid! Right? Right!&lt;/p&gt;

&lt;p&gt;I also created a &lt;a href="https://github.com/slashrsm/phoenix_auto_save/"&gt;GitHub repo&lt;/a&gt; where you can see the working code, run it and play with it.&lt;/p&gt;

&lt;p&gt;If you already know how LiveView works feel free to skip to the &lt;a href="#interesting"&gt;interesting part&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;More or less boring steps (&lt;a href="https://github.com/slashrsm/phoenix_auto_save/tree/ec10a35b40d78dc8b32722441470681ddf6d95f4"&gt;ec10a3&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;We need a new Phoenix project with a schema that we'll work with. I decided to go with a Post with title and body (but we could use any number or type of fields):&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;  # ...

  schema "posts" do
    field :body, :string
    field :title, :string

    timestamps()
  end

  # ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are not sure how to get this far check &lt;a href="https://hexdocs.pm/phoenix/overview.html"&gt;Phoenix documentation&lt;/a&gt;. It is great. Really... you should read it.&lt;/p&gt;

&lt;h2&gt;We want LiveView! (&lt;a href="https://github.com/slashrsm/phoenix_auto_save/commit/50709fd95237680092195083198f5e604471e223"&gt;50709f&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;There will be no juice without the LiveView, so let's bring it in by adding it to &lt;code&gt;mix.exs&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;  # ...

  defp deps do
    [
      # More dependencies ...
      {:phoenix_live_view, "~&gt; 0.9.0"}
    ]
  end

  # ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was the most recent version at the time of writing. Check &lt;a href="https://hex.pm/packages/phoenix_live_view"&gt;LiveView's page on hex.pm&lt;/a&gt; for up to date information.&lt;/p&gt;

&lt;p&gt;We will also need to update a few things in our project to be able to use it. Things like importing its JavaScript part, enabling the endpoint that will be used to establish the socket connection, bring in helpers, ... LiveView has &lt;a href="https://hexdocs.pm/phoenix_live_view/installation.html"&gt;great documentation that describes these steps in detail&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Good!&lt;/p&gt;

&lt;h2&gt;Let the real fun begin! (&lt;a href="https://github.com/slashrsm/phoenix_auto_save/commit/dde99250770de65ffed0e896020c86ead8774ca1"&gt;dde992&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;The idea is to let LiveView take control of the edit form for our post schema and let it react on any change to the form. This will result in changes being sent to the server where we will be able to save them. This will be very fast and efficient since LiveView uses web sockets to communicate and tries to be smart about the data that is being sent over the wire. Also, by LiveView taking over the entire form we make it very easy to add more fields - we should only make sure that they appear on the form. And that's it... Easy peasy!&lt;/p&gt;

&lt;p&gt;We will need to change the extension of the template in question (&lt;code&gt;form.html.eex&lt;/code&gt; to &lt;code&gt;form.html.leex&lt;/code&gt;) and make LiveView trigger an event on every change to the form (&lt;code&gt;phx_change: :change&lt;/code&gt; part):&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;&lt;%= f = form_for @changeset, @action, phx_change: :change %&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;LiveView also has some strict requirements about the structure of the form in templates. &lt;a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#module-form-events"&gt;You can learn more about that in the documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We also need to change how the form is rendered in its parent (&lt;code&gt;edit.html.eex&lt;/code&gt; in our case):&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# ...

&lt;%= live_render(
  @conn,
  PhoenixAutoSaveWeb.PostFormLive,
  session: %{
    "changeset" =&gt; @changeset,
    "action" =&gt; Routes.post_path(@conn, :update, @post),
    "post" =&gt; @post
  }
) %&gt;

# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;div id="interesting"&gt;&lt;/div&gt;

&lt;p&gt;Now we need a module that will implement the server-side logic. It will generally have a function that is called when the LiveView establishes the connection and one or multiple functions that handle the events. The most interesting part in our case is the callback that reacts on changes in the form:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# ...

  def handle_event("change", %{"post" =&gt; post_params}, socket) do
    {:ok, post} = Posts.update_post(socket.assigns.post, post_params)
    {
      :noreply,
      socket
      |&gt; assign(:changeset, Posts.change_post(post))
      |&gt; assign(:post, post)
    }
  end

# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let me explain this in a bit more detail:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;First argument is the event name. This comes from the &lt;code&gt;phx_change: :change&lt;/code&gt; thing that we added to the form template. &lt;code&gt;:change&lt;/code&gt; basically becomes &lt;code&gt;"change"&lt;/code&gt;. It is the name of the event.&lt;/li&gt;
&lt;li&gt;Second argument are the current values in the form. We are only interested in the post part so we pattern match it.&lt;/li&gt;
&lt;li&gt;Last argument is the socket object where the current state of the LiveView is stored.&lt;/li&gt;
&lt;li&gt;In the first line of the body we take the current post and update it with the values from the form. &lt;code&gt;Posts.update_post/2&lt;/code&gt; will also save the updated post into the database, essentially making the change persistent.&lt;/li&gt;
&lt;li&gt;At the end we update the socket with the new version of the post and our job is finished.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Now every time a change happens on the form it gets sent over and is saved. Amazing! (not so much... as you will see soon)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/slashrsm/phoenix_auto_save/commit/dde99250770de65ffed0e896020c86ead8774ca1#diff-5676f873552d62aad96c2e01688de90dR1"&gt;Full code of the LiveView&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Database gods will send me to hell unless.... (&lt;a href="https://github.com/slashrsm/phoenix_auto_save/commit/f23ec8b0db4d66578015f154b5d451c8491a65e9"&gt;f23ec8&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;You probably already saw the nasty part... The approach above will result in a database &lt;code&gt;UPDATE&lt;/code&gt; query literary for every letter while you are typing your fancy new blog post. Believe me, Postgres will hate you for that! And we wouldn't want that, would we? Imagine having hundreds of users writing their posts at the same time. Things would go very bad pretty soon....&lt;/p&gt;

&lt;p&gt;So how do we solve that? Well.... we can decide that auto save won't work and go on with our lives. Not so fast!&lt;/p&gt;

&lt;p&gt;What if we would keep the changes in the memory for a while and only save to the database periodically. Let's try:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# ...

  defp schedule_save() do
    Process.send_after(self(), :store, 10 * 1_000)
  end

  def handle_event("change", %{"post" =&gt; post_params}, socket) do
    {
      :noreply,
      socket
      |&gt; assign(:changeset, Posts.change_post(socket.assigns.post, post_params))
    }
  end

  def handle_info(:store, socket) do
    {:ok, post} = Posts.update_post(socket.assigns.changeset)
    schedule_save()
    {
      :noreply,
      socket
      |&gt; assign(:changeset, Posts.change_post(post))
      |&gt; assign(:post, post)
    }
  end

# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quite a lot going on here. Let's go step by step:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;code&gt;schedule_save/0&lt;/code&gt; will schedule a save operation 10 seconds (arbitrary, could be anything) after being called. We initially do that when the LiveView connection is established.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:change&lt;/code&gt; event no longer triggers fully-fledged save operation. It rather only stores the changes into the changeset that is part of the socket object. This is a fast in-memory operation.&lt;/li&gt;
&lt;li&gt;periodic &lt;code&gt;:store&lt;/code&gt; message will be processed by &lt;code&gt;handle_info/2&lt;/code&gt;. It will essentially do what the &lt;code&gt;:change&lt;/code&gt; handler was doing before. It updates the post, saves it into the database and updates the socket object.&lt;/li&gt;
&lt;li&gt;we schedule next save operation by calling &lt;code&gt;schedule_save()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Changes are now tracked in real-time and persisted periodically. Great user experience and Postgres will still be our friend. Much better!&lt;/p&gt;

&lt;h2&gt;But what if....&lt;/h2&gt;

&lt;p&gt;Current approach will work fine but can lead to loss of data in some cases. Let's imagine this case:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Author opens the form and starts writing the post. Changes are persisted periodically and life is good.&lt;/li&gt;
&lt;li&gt;At some point database update happens.&lt;/li&gt;
&lt;li&gt;Immediately after that our author gets a moment of supernatural inspiration and writes a huge amount out text in a single second.&lt;/li&gt;
&lt;li&gt;Supernatural powers apparently have side effects and our author closes the browser window before LiveView manages to save the most recent changes.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt; all changes since the last save - supernatural-powers driven moment of productivity - are lost. Not good!&lt;/p&gt;

&lt;p&gt;How can we solve this? We should try to detect the window close event and do one final save when that happens. Let's give it a try:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# ...

  def terminate(_reason, socket) do
    {:ok, %Post{}} = Posts.update_post(socket.assigns.changeset)
    :ok
  end

# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;&lt;li&gt;&lt;code&gt;terminate/2&lt;/code&gt; callback will be called when the LiveView connection is terminated. This can happen for many reasons: timeout, the user navigates to another page, browser window is closed, ...&lt;/li&gt;
&lt;li&gt;In our case we are not interested in the termination reason (first argument). Whenever something went wrong we want to save the data.&lt;/li&gt;
&lt;li&gt;Post is saved using &lt;code&gt;Posts.update_post/1&lt;/code&gt; - exactly the same as we do in &lt;code&gt;handle_event/3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;New posts? (&lt;a href="https://github.com/slashrsm/phoenix_auto_save/commit/f12a7670480bb28bd6e13882ec88dedd0e2bbd6c"&gt;f12a76&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;What about new posts? Our approach assumes that the post already exists in the database and this is not the case on the create form. One way to solve this would be to save an empty post before loading the form, which is obviously not ideal.&lt;/p&gt;

&lt;p&gt;Proper solution would be to use one of the approaches that I already mentioned at the beginning - drafts, "forward" revisions, ...&lt;/p&gt;

&lt;p&gt;I hope that you will find this writing useful and maybe use auto save for one of your projects. Do you have any comments, ideas or maybe noticed something that could have been done better. Do not hesitate to comment below!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Until next time!&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
      </description>
  <pubDate>Mon, 16 Mar 2020 20:18:29 +0000</pubDate>
    <dc:creator>slashrsm</dc:creator>
    <guid isPermaLink="false">124 at https://janezurevc.name</guid>
    </item>
<item>
  <title>BitQ&amp;A: hackathon finals presentation</title>
  <link>https://janezurevc.name/bitqa-hackathon-finals-presentation</link>
  <description>
&lt;span&gt;BitQ&amp;A: hackathon finals presentation&lt;/span&gt;

&lt;span&gt;&lt;span lang="" about="https://janezurevc.name/users/slashrsm" typeof="schema:Person" property="schema:name" datatype="" xml:lang=""&gt;slashrsm&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Tue, 19.11.2019 - 12:00&lt;/span&gt;

            &lt;div class="field field--name-body field--type-text-with-summary field--label-hidden field--item"&gt;&lt;p class="embed-responsive embed-responsive-16by9"&gt;
&lt;iframe loading="lazy" width="560" height="315" src="https://www.youtube-nocookie.com/embed/D1Q_s_Cs2mo" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bitqa.app"&gt;https://bitqa.app&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
      </description>
  <pubDate>Tue, 19 Nov 2019 11:00:06 +0000</pubDate>
    <dc:creator>slashrsm</dc:creator>
    <guid isPermaLink="false">123 at https://janezurevc.name</guid>
    </item>
<item>
  <title>BitQ&amp;A: interview</title>
  <link>https://janezurevc.name/bitqa-interview</link>
  <description>
&lt;span&gt;BitQ&amp;A: interview&lt;/span&gt;

&lt;span&gt;&lt;span lang="" about="https://janezurevc.name/users/slashrsm" typeof="schema:Person" property="schema:name" datatype="" xml:lang=""&gt;slashrsm&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Tue, 19.11.2019 - 11:56&lt;/span&gt;

            &lt;div class="field field--name-body field--type-text-with-summary field--label-hidden field--item"&gt;&lt;p class="embed-responsive embed-responsive-16by9"&gt;
&lt;iframe loading="lazy" width="560" height="315" src="https://www.youtube-nocookie.com/embed/Y4jVUnwOhhE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bitqa.app/"&gt;https://bitqa.app/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
      </description>
  <pubDate>Tue, 19 Nov 2019 10:56:33 +0000</pubDate>
    <dc:creator>slashrsm</dc:creator>
    <guid isPermaLink="false">122 at https://janezurevc.name</guid>
    </item>
<item>
  <title>Slovenian Drupal community celebrated the release of Commerce 2.0</title>
  <link>https://janezurevc.name/slovenian-drupal-community-celebrated-release-commerce-20</link>
  <description>
&lt;span&gt;Slovenian Drupal community celebrated the release of Commerce 2.0&lt;/span&gt;

&lt;span&gt;&lt;span lang="" about="https://janezurevc.name/users/slashrsm" typeof="schema:Person" property="schema:name" datatype="" xml:lang=""&gt;slashrsm&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Mon, 25.09.2017 - 15:59&lt;/span&gt;

            &lt;div class="field field--name-body field--type-text-with-summary field--label-hidden field--item"&gt;&lt;p&gt;As you may already know the &lt;a href="https://commerceguys.com/"&gt;Commerce Guys team&lt;/a&gt; released the first stable Drupal 8 version of the &lt;a href="https://drupal.org/project/commerce"&gt;truly flexible eCommerce suite&lt;/a&gt; last week. In order to celebrate this important event &lt;a href="https://commerceguys.com/celebrate-drupal-commerce-2"&gt;many parties were held all around the globe&lt;/a&gt;. Slovenian Drupal community definitely didn't want to miss that.&lt;/p&gt;

&lt;p&gt;We gathered at the &lt;a href="https://www.sprintaj.si"&gt;sprintaj.si&lt;/a&gt; headquarters in &lt;a href="https://en.wikipedia.org/wiki/Izola"&gt;Izola&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Slovenia"&gt;Slovenija&lt;/a&gt;. Sprintaj.si is not a classical "Drupal" business; they are a digital print shop. They are also a happy Drupal Commerce user and this was their way to show appreciation and give back to the community. Sprintaj.si was also one of the most interesting eCommerce projects I've been involved with. They support many different printed matters and their prices are always calculated on the fly based on the customer's needs. Their killer feature are custom formats and If you ever worked on an eCommerce project you can imagine that this results in some pretty hefty pricing rules.&lt;/p&gt;

&lt;p style="text-align: center;"&gt;
&lt;a href="https://www.sprintaj.si"&gt;&lt;img src="https://janezurevc.name/sites/default/files/attached-files/logo_center-300x208.png" /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;At the party we had two sessions:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href="https://www.drupal.org/u/iztok"&gt;Iztok Smolič&lt;/a&gt; from &lt;a href="https://www.agiledrop.com/"&gt;AgileDrop&lt;/a&gt; presented most important new features and changes that Commerce 2 brings and&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.drupal.org/u/wizonesolutions"&gt;Kevin Kaland&lt;/a&gt; from &lt;a href="https://www.wizonesolutions.com/"&gt;WizOne solutions&lt;/a&gt; shared his experience with migration of a Commerce project from Drupal 7 to Drupal 8.&lt;/li&gt;
&lt;/ul&gt;&lt;p style="text-align: center;"&gt;
&lt;a href="https://www.facebook.com/paletabar"&gt;&lt;img src="https://janezurevc.name/sites/default/files/attached-files/burger-paleta.jpg" /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;After the more educational part the more fun side of the event continued. Our hosts prepared a bunch of super tasty burgers and sponsored a small barrel of beer. OMG, we could easily repeat that!&lt;/p&gt;

&lt;p style="text-align: center;"&gt;
&lt;img src="https://janezurevc.name/sites/default/files/styles/content/public/attached-files/20170920_200057.jpg" /&gt;&lt;/p&gt;

&lt;p style="text-align: center;"&gt;
&lt;img src="https://janezurevc.name/sites/default/files/styles/content/public/attached-files/20170920_201344%281%29.jpg" /&gt;&lt;/p&gt;

&lt;p style="text-align: center;"&gt;
&lt;img src="https://janezurevc.name/sites/default/files/styles/content/public/attached-files/20170920_193514.jpg" /&gt;&lt;/p&gt;

&lt;p style="text-align: center;"&gt;
&lt;img src="https://janezurevc.name/sites/default/files/styles/content/public/attached-files/20170920_201344.jpg" /&gt;&lt;/p&gt;

&lt;p style="text-align: center;"&gt;
&lt;img src="https://janezurevc.name/sites/default/files/styles/content/public/attached-files/20170920_191815.jpg" /&gt;&lt;em&gt;Photos by: &lt;a href="https://www.drupal.org/u/alesr"&gt;Aleš Rebec&lt;/a&gt; and &lt;a href="https://www.drupal.org/u/benr"&gt;Ben Rajnović&lt;/a&gt;&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;We would like to congratulate the Commerce team for this important milestone. &lt;a href="https://www.youtube.com/watch?v=KOO5S4vxi0o"&gt;You rock!&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
      </description>
  <pubDate>Mon, 25 Sep 2017 13:59:42 +0000</pubDate>
    <dc:creator>slashrsm</dc:creator>
    <guid isPermaLink="false">114 at https://janezurevc.name</guid>
    </item>
<item>
  <title>Call for help with Media source plugin porting</title>
  <link>https://janezurevc.name/call-help-media-source-plugin-porting</link>
  <description>
&lt;span&gt;Call for help with Media source plugin porting&lt;/span&gt;

&lt;span&gt;&lt;span lang="" about="https://janezurevc.name/users/slashrsm" typeof="schema:Person" property="schema:name" datatype="" xml:lang=""&gt;slashrsm&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Wed, 16.08.2017 - 10:42&lt;/span&gt;

            &lt;div class="field field--name-body field--type-text-with-summary field--label-hidden field--item"&gt;&lt;p&gt;As you may already know &lt;a href="https://drupal.org/project/media_entity"&gt;Media entity&lt;/a&gt; module &lt;a href="https://www.drupal.org/node/2831274?page=1#comment-12094327"&gt;entered Drupal 8.4 as &lt;em&gt;Media&lt;/em&gt; module earlier this year&lt;/a&gt;. This was the result  of years of hard work in contrib and core space. While the module stayed conceptually the same we used this opportunity to clean it up and refactor some things; mostly to make APIs even easier to understand and use.&lt;/p&gt;

&lt;p&gt;Media entity comes with the concept of so-called &lt;em&gt;source plugins&lt;/em&gt; (also called &lt;em&gt;type plugins&lt;/em&gt; in the past). They are responsible for everything related to a specific media type: they have knowledge about their nature, about the way they should be stored and displayed, they are aware of any business logic related to them, etc.&lt;/p&gt;

&lt;p&gt;There were many plugins already available before Drupal core decided to adopt the module and they mostly lived as separate modules in contrib space. Since the API changed a bit during the core transition all this plugins need to be updated. The process is pretty straightforward, but the number of modules that need to be worked on is quite high. This means that we'll need quite some help from the community to do this as fast and as effectively as possible.&lt;/p&gt;

&lt;h2&gt;Here is where you come in!&lt;/h2&gt;

&lt;p&gt;Are you &lt;strong&gt;interested in contributing&lt;/strong&gt; but don't know how? Are you &lt;strong&gt;looking for a task that is relatively simple&lt;/strong&gt; but not completely trivial? Then the porting of media source plugins might be a &lt;strong&gt;really good entry point for you&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;There is a &lt;a href="https://www.drupal.org/node/2860796"&gt;meta issue that is trying to keep the overview over the porting process&lt;/a&gt;. You will find the list of modules and their current status in it. In order to get familiar with the changes that were introduced during the core transition you &lt;a href="https://www.drupal.org/node/2863992"&gt;should check the relevant change record&lt;/a&gt;. All information that is needed for ports should be available there. If you'd rather work with examples then take a look at &lt;a href="https://drupal.org/project/media_entity_image"&gt;Media entity image&lt;/a&gt; and &lt;a href="https://drupal.org/project/media_entity_document"&gt;Media entity document&lt;/a&gt;, which were adopted to core as &lt;a href="https://www.drupal.org/node/2831937"&gt;Image&lt;/a&gt; and &lt;a href="https://www.drupal.org/node/2831936"&gt;File&lt;/a&gt; source plugins respectively.&lt;/p&gt;

&lt;p&gt;When you decided which module deserves your attention check its issue queue. If there is already an issue about the porting get involved there. If there is not create one to let others know that you are working on the port. In any case make sure to add its reference to the &lt;a href="https://www.drupal.org/node/2860796"&gt;meta overview issue&lt;/a&gt;. This will help us to keep the general overview over the process.&lt;/p&gt;

&lt;h2&gt;Need help?&lt;/h2&gt;

&lt;p&gt;Have you checked all the resources I mentioned above and you feel that there are still things that are not entirely clear? Come to the #drupal-media channel on &lt;a href="https://www.drupal.org/irc"&gt;IRC&lt;/a&gt;. We are hanging out in that channel most of the times. Our weekly meetings happen in the same channel every Wednesday at 14h UTC.&lt;/p&gt;
&lt;/div&gt;
      
  &lt;div class="field field--name-field-related field--type-entity-reference field--label-above"&gt;
    &lt;div class="field--label"&gt;Enjoyed this post? There is more!&lt;/div&gt;
          &lt;div class="field--items"&gt;
              &lt;div class="field--item"&gt;&lt;a href="https://janezurevc.name/results-drupal-8-media-sprint" hreflang="en"&gt;Results of the Drupal 8 media sprint&lt;/a&gt;&lt;/div&gt;
          &lt;div class="field--item"&gt;&lt;a href="https://janezurevc.name/call-for-drupal-8-media-ecosystem-co-maintainers" hreflang="en"&gt;Call for Drupal 8 media ecosystem co-maintainers&lt;/a&gt;&lt;/div&gt;
          &lt;div class="field--item"&gt;&lt;a href="https://janezurevc.name/presentations-about-various-drupal-8-media-modules" hreflang="en"&gt;Presentations about various Drupal 8 media modules&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;
</description>
  <pubDate>Wed, 16 Aug 2017 08:42:41 +0000</pubDate>
    <dc:creator>slashrsm</dc:creator>
    <guid isPermaLink="false">112 at https://janezurevc.name</guid>
    </item>
<item>
  <title>Time to take some time off the Drupal community</title>
  <link>https://janezurevc.name/time-take-some-time-drupal-community</link>
  <description>
&lt;span&gt;Time to take some time off the Drupal community&lt;/span&gt;

&lt;span&gt;&lt;span lang="" about="https://janezurevc.name/users/slashrsm" typeof="schema:Person" property="schema:name" datatype="" xml:lang=""&gt;slashrsm&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Tue, 28.03.2017 - 10:11&lt;/span&gt;

            &lt;div class="field field--name-body field--type-text-with-summary field--label-hidden field--item"&gt;&lt;p&gt;When I joined the Drupal community I felt that I arrived in the enthusiastic, welcoming and positive environment. I felt that all contributions are appreciated and that we're all following more or less the same goal. This belief was also mostly the source of motivation for my extensive contributions to the Drupal 8 Media initiative in the past 4 years or so. This has dramatically changed in the last year or so and seems to be getting worse all the time.&lt;/p&gt;

&lt;p&gt;Our community has governance and conflict-resolution rules. Everything should be clear and transparent. At least in theory. But in practice things don't work that way. Decisions (political and technical) are often made behind closed doors where only small fraction of the community is allowed to participate. Decision processes are nontransparent and leadership doesn't seem to feel any need to improve that. This was also the main reason why I recently decided to discontinue my DA membership.&lt;/p&gt;

&lt;p&gt;I think that, in order to survive in the long term, we'll need to reform our community to become truly transparent and democratic. We've been "living" in a dictatorship and it has been working for us so far. But history shows that too much concentration of power in an small ruling clique almost always leads to its abuse (I strongly recommend &lt;a href="https://en.wikipedia.org/wiki/Why_Nations_Fail"&gt;this book&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;My impression is that the community in general is getting increasingly toxic. It feels that there is more and more hypocrisy, lies, secret goals and partial interests being involved (and I think that the lack of transparency contributes to that). Best indicator for in my case are the community events which have (with some rare bright exceptions) become a burden instead of enjoyment for me. I still enjoy meeting some people that have become my friends during the years, but I recently started seeing the community in general as increasingly negative, abusing and exhausting.&lt;/p&gt;

&lt;p&gt;Stress and bad mood directly linked to the happenings in the Drupal started affecting my personal life, including relations with my family. This is not acceptable and I decided to take some time off  to think about the situation and to decide if and to what extent I want to remain active in the community. This decision was not made solely due to the most recent ousting (which also clearly showed how the community and its leadership actually work). It is based on many events that happened in last year or so.&lt;/p&gt;

&lt;p&gt;This is my personal decision and has nothing to do with my employer. I really enjoy working at MD Systems and have no intentions to introduce any changes into that part of my life.&lt;/p&gt;
&lt;/div&gt;
      </description>
  <pubDate>Tue, 28 Mar 2017 08:11:30 +0000</pubDate>
    <dc:creator>slashrsm</dc:creator>
    <guid isPermaLink="false">111 at https://janezurevc.name</guid>
    </item>
<item>
  <title>Get ready for the Media workshop at Drupal dev days Seville</title>
  <link>https://janezurevc.name/get-ready-media-workshop-drupal-dev-days-seville</link>
  <description>
&lt;span&gt;Get ready for the Media workshop at Drupal dev days Seville&lt;/span&gt;

&lt;span&gt;&lt;span lang="" about="https://janezurevc.name/users/slashrsm" typeof="schema:Person" property="schema:name" datatype="" xml:lang=""&gt;slashrsm&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Wed, 22.03.2017 - 12:43&lt;/span&gt;

            &lt;div class="field field--name-body field--type-text-with-summary field--label-hidden field--item"&gt;&lt;p&gt;Tomorrow I'll be giving a &lt;a href="https://seville2017.drupaldays.org/sessions/building-media-site-scratch"&gt;workshop about the Drupal 8 media&lt;/a&gt;. As part of it we'll build a "media" site from scratch. We will start with the standard Drupal installation, add modules and configuration and see how far we can get.&lt;/p&gt;

&lt;p&gt;If you are planning to attend the workshop and want to be fully productive I'd ask you to take some time and prepare your development environment. We will need Drupal 8 checkout with the following modules:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href="https://drupal.org/project/blazy"&gt;Blazy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drupal.org/project/ctools"&gt;CToolS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drupal.org/project/dropzonejs"&gt;DropzoneJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drupal.org/project/embed"&gt;Embed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drupal.org/project/entity"&gt;Entity API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drupal.org/project/entity_browser"&gt;Entity browser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drupal.org/project/entity_embed"&gt;Entity embed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drupal.org/project/field_formatter"&gt;Field formatter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drupal.org/project/inline_entity_form"&gt;Inline entity form&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drupal.org/project/media_entity"&gt;Media entity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drupal.org/project/media_entity_image"&gt;Media entity image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drupal.org/project/media_entity_instagram"&gt;Media entity Instagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drupal.org/project/media_entity_slideshow"&gt;Media entity Slideshow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drupal.org/project/media_entity_twitter"&gt;Media entity Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drupal.org/project/slick"&gt;Slick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drupal.org/project/slick_media"&gt;Slick media&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drupal.org/project/url_embed"&gt;URL embed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drupal.org/project/video_embed_field"&gt;Video embed field&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Besides that we'll also need Dropzone and Slick libraries, which you can install based on the docs provided in the README files of the respective modules (&lt;a href="http://cgit.drupalcode.org/dropzonejs/tree/README.md"&gt;[1]&lt;/a&gt;, &lt;a href="http://cgit.drupalcode.org/slick/tree/README.txt?h=8.x-1.x"&gt;[2]&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;You can download all dependencies manually or use the &lt;a href="https://github.com/slashrsm/media-workshop-project"&gt;project template that I provided for you&lt;/a&gt;. Simply clone the repository and run &lt;code&gt;composer install &amp;&amp; composer drupal-scaffold&lt;/code&gt; in the project root.&lt;/p&gt;
&lt;/div&gt;
      
  &lt;div class="field field--name-field-related field--type-entity-reference field--label-above"&gt;
    &lt;div class="field--label"&gt;Enjoyed this post? There is more!&lt;/div&gt;
          &lt;div class="field--items"&gt;
              &lt;div class="field--item"&gt;&lt;a href="https://janezurevc.name/want-learn-entity-browser" hreflang="en"&gt;Want to learn Entity browser?&lt;/a&gt;&lt;/div&gt;
          &lt;div class="field--item"&gt;&lt;a href="https://janezurevc.name/possible-solution-knowledge-sharing-drupal-8-media-domain" hreflang="en"&gt;Possible solution for knowledge sharing in the Drupal 8 media domain&lt;/a&gt;&lt;/div&gt;
          &lt;div class="field--item"&gt;&lt;a href="https://janezurevc.name/call-for-drupal-8-media-ecosystem-co-maintainers" hreflang="en"&gt;Call for Drupal 8 media ecosystem co-maintainers&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;
</description>
  <pubDate>Wed, 22 Mar 2017 11:43:57 +0000</pubDate>
    <dc:creator>slashrsm</dc:creator>
    <guid isPermaLink="false">110 at https://janezurevc.name</guid>
    </item>
<item>
  <title>Want to learn Entity browser?</title>
  <link>https://janezurevc.name/want-learn-entity-browser</link>
  <description>
&lt;span&gt;Want to learn Entity browser?&lt;/span&gt;

&lt;span&gt;&lt;span lang="" about="https://janezurevc.name/users/slashrsm" typeof="schema:Person" property="schema:name" datatype="" xml:lang=""&gt;slashrsm&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Wed, 15.02.2017 - 16:17&lt;/span&gt;

            &lt;div class="field field--name-body field--type-text-with-summary field--label-hidden field--item"&gt;&lt;p&gt;One way to start is to check &lt;a href="http://milan2016.drupaldays.org/node/129"&gt;the session that gave at the Drupal dev days Milano&lt;/a&gt; in June 2016. I went through the architecture of the module and most common use cases.&lt;/p&gt;

&lt;p class="embed-responsive embed-responsive-16by9"&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/bnUfDRTAcxU" frameborder="0" allowfullscreen=""&gt;&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I also proposed a &lt;a href="https://seville2017.drupaldays.org/sessions/building-media-site-scratch"&gt;Media workshop for Drupal dev days Seville&lt;/a&gt; where I want to cover the entire Drupal 8 Media ecosystem from the site builder's perspective. Besides that I also proposed &lt;a href="https://seville2017.drupaldays.org/sessions/drupaler-drinks-some-elixir-what-happens-next"&gt;a session about my recent experiments with Elixir&lt;/a&gt;. Not necessarily Drupal or PHP related, but I think that looking beyond our bubble can be very beneficial.&lt;/p&gt;
&lt;/div&gt;
      
  &lt;div class="field field--name-field-related field--type-entity-reference field--label-above"&gt;
    &lt;div class="field--label"&gt;Enjoyed this post? There is more!&lt;/div&gt;
          &lt;div class="field--items"&gt;
              &lt;div class="field--item"&gt;&lt;a href="https://janezurevc.name/playing-sculpin-static-site-generator" hreflang="en"&gt;Playing with the Sculpin static site generator&lt;/a&gt;&lt;/div&gt;
          &lt;div class="field--item"&gt;&lt;a href="https://janezurevc.name/possible-solution-knowledge-sharing-drupal-8-media-domain" hreflang="en"&gt;Possible solution for knowledge sharing in the Drupal 8 media domain&lt;/a&gt;&lt;/div&gt;
          &lt;div class="field--item"&gt;&lt;a href="https://janezurevc.name/join-us-next-drupal-media-sprint-mountain-camp-davos" hreflang="en"&gt;Join us at the next Drupal Media sprint at the Mountain camp in Davos!&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;
</description>
  <pubDate>Wed, 15 Feb 2017 15:17:56 +0000</pubDate>
    <dc:creator>slashrsm</dc:creator>
    <guid isPermaLink="false">109 at https://janezurevc.name</guid>
    </item>
<item>
  <title>Possible solution for knowledge sharing in the Drupal 8 media domain</title>
  <link>https://janezurevc.name/possible-solution-knowledge-sharing-drupal-8-media-domain</link>
  <description>
&lt;span&gt;Possible solution for knowledge sharing in the Drupal 8 media domain&lt;/span&gt;

&lt;span&gt;&lt;span lang="" about="https://janezurevc.name/users/slashrsm" typeof="schema:Person" property="schema:name" datatype="" xml:lang=""&gt;slashrsm&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Mon, 06.02.2017 - 10:48&lt;/span&gt;

            &lt;div class="field field--name-body field--type-text-with-summary field--label-hidden field--item"&gt;&lt;p&gt;Drupal 8 has very good media handling support. Media team has (and still is) working hard to make Drupal the best CMS in the world when it comes to managing media. We have many modules in the contrib space that solve most of the common use cases in the domain. There is one problem though; there are many of them and some of them are quite complex and abstract. I've noticed that many times users struggle to completely understand what each module is responsible for, which features it comes with and specially how they all together fit into the bigger picture.&lt;/p&gt;

&lt;p&gt;There are so-called feature modules (such as &lt;a href="https://drupal.org/project/file_browser"&gt;File entity browser&lt;/a&gt;, &lt;a href="https://drupal.org/project/media"&gt;Media&lt;/a&gt;, &lt;a href="https://drupal.org/project/content_browser"&gt;Content browser&lt;/a&gt;, &lt;a href="https://drupal.org/project/media_entity_browser"&gt;Media entity browser&lt;/a&gt;, ...) and distributions (such as &lt;a href="http://www.md-systems.ch/en/projects/portfolio/np8"&gt;NP8&lt;/a&gt;, &lt;a href="https://drupal.org/project/thunder"&gt;Thunder&lt;/a&gt;, &lt;a href="https://drupal.org/project/lightning"&gt;Lightning&lt;/a&gt;, ...) which ship with default configuration for the 80% use case. They are plug and play solutions, but it is also possible to use them as a base for learning and research of the ecosystem.&lt;/p&gt;

&lt;p&gt;But unfortunately that's not enough. While some people learn the quickest by exploring existing solutions (myself included) that isn't the case for everyone. A lot of people need more guidance and those are the users that we're currently not supporting as much as we should. In order to drive further adoption of the media ecosystem and Drupal 8 itself we need to solve this knowledge sharing problem that I believe we have.&lt;/p&gt;

&lt;p&gt;I was thinking about this problem a lot lately and I think I came up with an idea that could help us solve it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It is a book&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;problem solving oriented&lt;/strong&gt; book which would guide users through the ecosystem, explain individual parts and, most importantly, offer &lt;strong&gt;a bunch of recipes&lt;/strong&gt; for the common problems. It wouldn't be one of those 800+ pages technical books (who has time to read that?!). Rather it would be a &lt;strong&gt;compact source of information&lt;/strong&gt; which you can have on your desk and &lt;strong&gt;use it when you run into a problem&lt;/strong&gt;. We all want to build websites and the purpose of this book would be to help you do that as fast and as efficiently as possible.&lt;/p&gt;

&lt;p&gt;Book would produced by the people that designed and built the Drupal 8 media ecosystem, which would ensure &lt;strong&gt;highest levels of quality&lt;/strong&gt;. It would be &lt;strong&gt;released under a &lt;a href="https://en.wikipedia.org/wiki/Creative_Commons"&gt;Creative commons license&lt;/a&gt;&lt;/strong&gt; with its sources publicly available on GitHub. Printed and compiled eBook versions would be sold through the standard channels.&lt;/p&gt;

&lt;h2&gt;Why copyleft?&lt;/h2&gt;

&lt;p&gt;I honestly believe into the free sharing of knowledge in our society. My opinion is that the &lt;strong&gt;only way to evolve our civilization is to freely share the knowledge&lt;/strong&gt; that we have. There are also practical reasons besides the philosophical one. Making the book publicly available ensures that it will be likely updated as the ecosystem and Drupal itself evolve and change. This wouldn't necessarily be the case if the standard copyright license would be used.&lt;/p&gt;

&lt;h2&gt;Great idea! Why didn't you realize it already?&lt;/h2&gt;

&lt;p&gt;I am glad that you agree! :) Well... it is not that easy. Producing a real book is not &lt;em&gt;that&lt;/em&gt; simple and it also comes with quite some expenses. There is the cost of the content production, proofreading, design, print, shipping, ... I've done a back of a napkin calculation and estimated that &lt;strong&gt;we'd need around 20.000€/$21.500/17.000GBP&lt;/strong&gt; to do it.&lt;/p&gt;

&lt;p&gt;My idea was to start a &lt;strong&gt;crowdfunding campaign&lt;/strong&gt; to raise this amount. Backers would, depending on the perk level, get an eBook, print edition or both. Besides that they'd also get early access to the repository with the ability to provide feedback during the process of writing.&lt;/p&gt;

&lt;h2&gt;Now I need your feedback&lt;/h2&gt;

&lt;p&gt;I need to &lt;strong&gt;hear from you&lt;/strong&gt;. Is this something that would benefit the community? Is there any better way to educate users about the ecosystem? Would you prefer an online video course instead of a book? In-person training? Something else? Would you be prepared to back the crowdfunding campaign? If yes, what amount would you be prepared to invest?&lt;/p&gt;

&lt;p&gt;Please &lt;strong&gt;use the form below&lt;/strong&gt; to share your thoughts. Thank you! I appreciate it.&lt;/p&gt;
&lt;/div&gt;
      
  &lt;div class="field field--name-field-related field--type-entity-reference field--label-above"&gt;
    &lt;div class="field--label"&gt;Enjoyed this post? There is more!&lt;/div&gt;
          &lt;div class="field--items"&gt;
              &lt;div class="field--item"&gt;&lt;a href="https://janezurevc.name/join-us-next-drupal-media-sprint-mountain-camp-davos" hreflang="en"&gt;Join us at the next Drupal Media sprint at the Mountain camp in Davos!&lt;/a&gt;&lt;/div&gt;
          &lt;div class="field--item"&gt;&lt;a href="https://janezurevc.name/playing-sculpin-static-site-generator" hreflang="en"&gt;Playing with the Sculpin static site generator&lt;/a&gt;&lt;/div&gt;
          &lt;div class="field--item"&gt;&lt;a href="https://janezurevc.name/results-drupal-8-media-sprint" hreflang="en"&gt;Results of the Drupal 8 media sprint&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;
</description>
  <pubDate>Mon, 06 Feb 2017 09:48:05 +0000</pubDate>
    <dc:creator>slashrsm</dc:creator>
    <guid isPermaLink="false">108 at https://janezurevc.name</guid>
    </item>
<item>
  <title>Playing with the Sculpin static site generator</title>
  <link>https://janezurevc.name/playing-sculpin-static-site-generator</link>
  <description>
&lt;span&gt;Playing with the Sculpin static site generator&lt;/span&gt;

&lt;span&gt;&lt;span lang="" about="https://janezurevc.name/users/slashrsm" typeof="schema:Person" property="schema:name" datatype="" xml:lang=""&gt;slashrsm&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Sun, 29.01.2017 - 22:08&lt;/span&gt;

            &lt;div class="field field--name-body field--type-text-with-summary field--label-hidden field--item"&gt;&lt;p&gt;&lt;img src="https://janezurevc.name/sites/default/files/attached-files/sculpin.jpg" alt="Sculpin generator" /&gt;&lt;/p&gt;

&lt;p&gt;I can hear you asking: "What the hack is that?" Let me quote the &lt;a href="https://sculpin.io/"&gt;Sculpin's authors&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;Sculpin is a static site generator written in PHP. It converts Markdown files, Twig templates and standard HTML into a static HTML site that can be easily deployed. &lt;/blockquote&gt;

&lt;p&gt;Few days ago a need for a very simple website arose which was way too simple to use &lt;a href="https://www.drupal.org/8"&gt;Drupal 8&lt;/a&gt; for it. Even &lt;a href="https://wordpress.org"&gt;Wordpress&lt;/a&gt; would be way over the top. On the other hand I really wanted to try static HTML generators for a while and this seemed a perfect opportunity to do that.&lt;/p&gt;

&lt;p&gt;There are many static HTML generators out there, &lt;a href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; probably being the most popular (it is also supported by &lt;a href="https://pages.github.com/"&gt;GitHub pages&lt;/a&gt;, which makes hosting trivial). I, however, decided to go with Sculpin because it is written in PHP and is using Symfony and Twig. I am already more or less familiar with all these technologies, which made the task a bit easier.&lt;/p&gt;

&lt;p&gt;Result?&lt;/p&gt;

&lt;p&gt;Few hours, very simple &lt;a href="http://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; based theme, &lt;a href="http://flexslider.woothemes.com/index.html"&gt;FlexSlider&lt;/a&gt;, some &lt;a href="https://en.wikipedia.org/wiki/Markdown"&gt;Markdown&lt;/a&gt; and violà! Site was done and running. It is performant, I can host it literary everywhere, no need to clear caches every time when something behaves strange, no updates, security out of the box, ...&lt;/p&gt;

&lt;p&gt;I could totally use something similar for this blog too. Heresy against The religion of Drupal™ you say? Maybe.... But think about it. I am already using Markdown (not really a WYSIWYG fan) to write my posts. That wouldn't change at all. I use &lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt; for comments, which would play perfectly fine with static HTML. I could use &lt;a href="liquidforms.io/"&gt;Liquid Forms&lt;/a&gt; or something similar to run the contact form or simply ask people to reach out via Twitter or IRC. That's it. It could probably be done in a day while it took me 3 or 4 days to &lt;a href="https://janezurevc.name/janezurevc-name-runs-on-drupal-8"&gt;migrate my Drupal 7 blog to Drupal 8&lt;/a&gt;. Not to mention the significantly easier maintenance.&lt;/p&gt;

&lt;p&gt;I might even consider doing that when the migration to Drupal 9 comes around. We'll see what the hip thing at that time will be...&lt;/p&gt;

&lt;h2&gt;All this got me thinking...&lt;/h2&gt;

&lt;p&gt;Solutions like Jekyll and Sculpin are gaining popularity in the lowest end of the web market. By that they are eating into what used to be market of CMSes like Drupal and Wordpress just a few years ago. Benefits are clear (mainly performance and easy maintenance). The user experience and the ease of use is still on the CMS side, but for slightly tech savvy users it is completely doable. And this might very likely change in the next few years (every software tries to improve over time, right). That said, this kind of tools might (together with pure SaaS solutions) dominate the lower-end web market in the future.&lt;/p&gt;

&lt;p&gt;"But Drupal 8 is enterprise-oriented. That's what we care about!" you'll say. OK. Probably true, but...&lt;/p&gt;

&lt;p&gt;It is easier than ever to build custom web projects in PHP. In the times before Composer, Packagist and all other nice stuff that we have today existed it was total PITA to find and bring a bunch of 3rd party libraries together to help you build a custom app. In just a few short years this became much simpler and will become even easier as our tools and ecosystem evolve. And PHP is not alone in this world. There are many new and modern languages/platforms that are all doing similar things from this perspective. All of them have some kind of package manager, dependency resolver, repositories of 3rd party packages, etc. It is to be expected that this will only continue. Tools will become even easier to use, 3rd party libraries/packages will become more powerful and building custom projects based on them even faster.&lt;/p&gt;

&lt;p&gt;Higher-end projects usually have some budget to invest into development. What would you choose if the cost of development using a CMS like Drupal would be similar to the cost of building a custom project? Specially if you don't need all the features and complexity that CMS offers?&lt;/p&gt;

&lt;p&gt;"Are you saying that Drupal is going away?" you ask.&lt;/p&gt;

&lt;p&gt;Of course not. Drupal is a great tool that can efficiently solve many problems. But there are definitely better tools for some others. It also seems that there is strong competition on all sides of the web market, which is eating into the pie that was reserved for traditional CMSes in the past. Drupal will need to think about this and position itself into that segment of the market where it is the strongest. The days of "Drupal for everything" are clearly over.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What is your opinion about this? What do you think future will bring us? Let's continue the discussion in the comments below!&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
      
  &lt;div class="field field--name-field-related field--type-entity-reference field--label-above"&gt;
    &lt;div class="field--label"&gt;Enjoyed this post? There is more!&lt;/div&gt;
          &lt;div class="field--items"&gt;
              &lt;div class="field--item"&gt;&lt;a href="https://janezurevc.name/join-us-next-drupal-media-sprint-mountain-camp-davos" hreflang="en"&gt;Join us at the next Drupal Media sprint at the Mountain camp in Davos!&lt;/a&gt;&lt;/div&gt;
          &lt;div class="field--item"&gt;&lt;a href="https://janezurevc.name/drupal-dev-environment-on-docker" hreflang="en"&gt;Drupal dev environment on Docker&lt;/a&gt;&lt;/div&gt;
          &lt;div class="field--item"&gt;&lt;a href="https://janezurevc.name/entity-browser-feature-freeze-will-happen-two-weeks" hreflang="en"&gt;Entity browser feature freeze will happen in two weeks&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;
      &lt;/div&gt;
</description>
  <pubDate>Sun, 29 Jan 2017 21:08:24 +0000</pubDate>
    <dc:creator>slashrsm</dc:creator>
    <guid isPermaLink="false">106 at https://janezurevc.name</guid>
    </item>

  </channel>
</rss>
